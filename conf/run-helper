#!/bin/bash
#
print_usage(){
  echo "Usage:"
  echo "  xrosswall [command]"
  echo ""
  echo "Available Commands:"
  echo "  init	     Set caddy && v2ray default config file."
  echo "  test       test whether caddy && v2ray config file is valid."
  echo "  version    Print the version."
  echo "  -h|--help  show usage info."
}

print_version_info(){
  echo "xrosswall ${SNAP_VERSION}"
  echo ""
  echo "caddy $(caddy version) with all standard modules"
  echo "$(caddy list-modules --versions --skip-standard)"
  echo ""
  echo "$(v2ray version)"
}

init_params(){
  echo "Please answer those questions."
  echo "You can keep the default options just press enter."
  read -rp "Your domain: " -e SERVER_DOMAIN
  read -rp "Your uuid: " -e -i $(v2ray uuid) -e V2RAY_UUID
  read -rp "V2ray websocket path: " -e -i $(shuf -zer -n 12 -e {a..z} {0..9} | tr -d '\0') WS_PATH
  read -rp "V2ray listen port: " -e -i 10080 V2RAY_PORT
  echo "Choose your TLS certificates option:"
  until [[ ${TLS_OPTION} == 1 || ${TLS_OPTION} == 2 ]];do
    read -rp "1.ACME 2.DNS Challenge : " -e TLS_OPTION
  done
  case $TLS_OPTION in
      1)
        read -rp "Your email: " -e TLS_ACME_EMAIL
	export TLS_CONTENTS=$TLS_ACME_EMAIL
        ;;
      2)
        read -rp "Your DNS provider: " -e TLS_DNS_PROVIDER
        read -rp "DNS API Key: " -e TLS_DNS_API_KEY
	export TLS_CONTENTS="{
		dns $TLS_DNS_PROVIDER $TLS_DNS_API_KEY
	}"
        ;;
      *)
        echo "Unknown TLS_OPTION: $TLS_OPTION"
        exit 1
        ;;
  esac
  export SERVER_DOMAIN V2RAY_UUID WS_PATH V2RAY_PORT
  
}

make_config(){
  if [ -e ${SNAP_DATA}/Caddyfile ] || [ -e ${SNAP_DATA}/config.json ];
  then
    echo "Config file already exists!"
    echo "If you want to init with new config files"
    echo "Please remove files under '/var/snap/xrosswall/current/' first!"
    exit 1
  else
    if init_params;
    then
      envsubst < "$SNAP/conf/Caddyfile.tpl" > $SNAP_DATA/Caddyfile && envsubst < "$SNAP/conf/config.json.tpl" > $SNAP_DATA/config.json
      if [ $? -eq 0 ];then
        echo "Init success!"
        echo "Please restart service, run 'sudo snap restart xrosswall'."
      else
        echo "Init failed. Please run 'sudo xrosswall init'"
        exit 1
      fi
    fi
  fi
}

test_config(){
  if [ -e ${SNAP_DATA}/Caddyfile ] || [ -e ${SNAP_DATA}/config.json ];then
    echo "Caddy: $(caddy validate --config $SNAP_DATA/Caddyfile | tail -n 1)"
    echo ""
    echo "V2ray: $(v2ray test -c $SNAP_DATA/config.json | tail -n 1)"
    echo ""
  else
    echo "Config file not exist!"
    echo ""
    exit 1
  fi
}

subcommand=$1
case $subcommand in
    init)
	make_config
        ;;
    test)
        test_config
        ;;
    version)
	print_version_info
        ;;
    -h|--help)
	print_usage
	;;
    *)
	echo "No such subcommand: $subcommand."
	echo "Please run 'xrosswall -h' for help."
	exit 1
	;;
esac
